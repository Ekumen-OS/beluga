# Copyright 2024 Ekumen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import yaml
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import argparse


def read_yaml_file(file_path):
    with open(file_path, 'r') as file:
        data = yaml.safe_load(file)
        return data


def plot_stages(yaml_data, axs, index):
    particles = yaml_data['simulation_records'][index]["particles"]
    for j, stage in enumerate(['current', 'propagate', 'reweight', 'resample']):
        states = particles[stage]['states']
        ax = axs[j]
        ax.clear()
        ax.hist(
            states,
            bins=np.arange(min(states), max(states) + 0.5, 0.5),
            color='skyblue',
            edgecolor='black',
        )
        ax.set_title(f"{stage} - Sim Cycle {index+1}")
        ax.set_xlabel("States")
        ax.set_ylabel("NP")
        ax.set_xlim(-5, 100)
        ax.set_xticks(np.arange(-5, 101, 5))

    landmark_map = yaml_data["landmark_map"]
    ax_landmark = axs[4]
    ax_landmark.clear()

    for x in range(101):
        if x in landmark_map:
            color = 'red'
        else:
            color = 'blue'
        ax_landmark.bar(x, 1, color=color)

    ax_landmark.set_title("Landmark Map")
    ax_landmark.set_xlabel("States")
    ax_landmark.set_xlim(-5, 100)
    ax_landmark.set_ylim(0, 2)
    ax_landmark.set_xticks(np.arange(-5, 101, 5))

    ground_truth = yaml_data['simulation_records'][index]["ground_truth"]
    ax_ground_truth = axs[5]
    ax_ground_truth.clear()
    ax_ground_truth.bar(ground_truth, 1, color='green')
    ax_ground_truth.set_title(f"Ground Truth: {ground_truth}")
    ax_ground_truth.set_xlabel("States")
    ax_ground_truth.set_xlim(-5, 100)
    ax_ground_truth.set_ylim(0, 2)
    ax_ground_truth.set_xticks(np.arange(-5, 101, 5))

    mean = "{:.3f}".format(yaml_data['simulation_records'][index]["estimation"]["mean"])
    sd = "{:.3f}".format(yaml_data['simulation_records'][index]["estimation"]["sd"])
    plt.text(
        0.5,
        0.5,
        f"Mean: {mean}\nSD: {sd}",
        ha='center',
        va='center',
        transform=axs[5].transAxes,
        bbox=dict(facecolor='white', alpha=0.5),
    )

    plt.tight_layout()
    plt.draw()


def on_key(event, yaml_data, axs, current_frame_container, num_frames):
    if event.key == 'right':
        current_frame_container[0] = (current_frame_container[0] + 1) % num_frames
    elif event.key == 'left':
        current_frame_container[0] = (current_frame_container[0] - 1) % num_frames
    plot_stages(yaml_data, axs, current_frame_container[0])


def main(argv=None) -> int:
    parser = argparse.ArgumentParser(
        description="This script uses the matplotlib to visualize the data generated\
            by beluga_tutorial example code."
    )

    parser.add_argument(
        '-p',
        '--record-file-path',
        type=str,
        help='Absolute path to the record file generated by the beluga_tutorial example code',
        required=True,
    )

    parser.add_argument(
        '-m',
        '--manual-control',
        type=bool,
        help='Manual controlling the time steps of the visualization',
        required=False,
        default=False,
    )

    parser.add_argument(
        '-i',
        '--interval-ms',
        type=int,
        help='Delay between frames in milliseconds.',
        required=False,
        default=250,
    )

    args = parser.parse_args(argv)

    yaml_data = read_yaml_file(args.record_file_path)

    if yaml_data:
        fig, axs = plt.subplots(6, 1)
        num_frames = len(yaml_data['simulation_records'])

        if args.manual_control:
            current_frame_container = [0]
            plot_stages(yaml_data, axs, current_frame_container[0])
            fig.canvas.mpl_connect(
                'key_press_event',
                lambda event: on_key(
                    event, yaml_data, axs, current_frame_container, num_frames
                ),
            )
        else:

            def update(current_frame):
                plot_stages(yaml_data, axs, current_frame)

            animation.FuncAnimation(
                fig,
                update,
                frames=num_frames,
                blit=False,
                interval=args.interval_ms,
                repeat=False,
            )

        plt.show()


if __name__ == '__main__':
    exit(main())
