#!/usr/bin/env python3
#
# Copyright 2023 Ekumen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from pathlib import Path
import sys

import json

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def get_value_with_unit(data):
    return f"{data['value']:.2f}{data['unit_repr']}"


def get_timem_metrics(pathlike):
    path = Path(pathlike)
    name = path.name
    file = path / 'timem-output.json'
    try:
        with open(file, mode='r') as f:
            output = json.load(f)
    except (FileExistsError, FileNotFoundError) as ex:
        print(f"Failed to open file '{file.absolute()}': {ex}", file=sys.stderr)
        return 1
    output = output['timemory']
    output = output['timem'][0]
    data = output['peak_rss']
    peak_rss_str = get_value_with_unit(data)
    data = output['cpu_util']
    cpu_usage_str = get_value_with_unit(data)
    data = output['wall_clock']
    elapsed_time = data['value']
    elapsed_time_str = get_value_with_unit(data)
    time = np.arange(0.0, elapsed_time, 0.2)
    wall_clock_to_time_offset = output['history'][0]['wall_clock']['value']
    wall_clock_to_time_scale = elapsed_time / (
        output['history'][-1]['wall_clock']['value'] - wall_clock_to_time_offset
    )
    time = []
    rss = []
    virtual_memory = []
    for sample in output['history']:
        time.append(
            (sample['wall_clock']['value'] - wall_clock_to_time_offset)
            * wall_clock_to_time_scale
        )
        rss.append(sample['page_rss']['value'])
        virtual_memory.append(sample['virtual_memory']['value'])

    series = pd.DataFrame(
        {'time': time, 'rss': rss, 'virtual_memory': virtual_memory}
    ).set_index('time')
    print(f"timem metrics for run '{name}':")
    print(f"\telapsed_time: {elapsed_time_str}")
    print(f"\tcpu_usage: {cpu_usage_str}")
    print(f"\tpeak_rss: {peak_rss_str}")
    series.plot(subplots=True)
    plt.show()


if __name__ == '__main__':
    import argparse

    arg_parser = argparse.ArgumentParser(
        description='Script to postprocess timem results.'
    )
    arg_parser.add_argument('dir', help='Directory with timem-output.json file')
    args = arg_parser.parse_args()
    sys.exit(get_timem_metrics(args.dir))
