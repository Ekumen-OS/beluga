#!/usr/bin/env python

# Copyright 2023 Ekumen, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import math

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add(
    "global_frame_id", str_t, 0,
    "The name of the coordinate frame "
    "published by the localization system.",
    default="map"
)

gen.add(
    "odom_frame_id", str_t, 0,
    "The name of the coordinate frame "
    "to use for odometry.",
    default="odom"
)

gen.add(
    "base_frame_id", str_t, 0,
    "The name of the coordinate frame "
    "to use for the robot base.",
    default="base_footprint"
)

gen.add(
    "map_topic", str_t, 0,
    "Topic to subscribe to in order to "
    "receive the map to localize on.",
    default="map"
)

gen.add(
    "map_service", str_t, 0,
    "Service to call to get the map to localize on.",
    default="static_map"
)

gen.add(
    "use_map_topic", bool_t, 0,
    "Whether to subscribe to the map topic or "
    "call the map service to get a map to localize on.",
    default=True
)

gen.add(
    "initial_pose_topic", str_t, 0,
    "Topic to subscribe to in order to "
    "receive the initial pose of the robot.",
    default="initialpose"
)

gen.add(
    "scan_topic", str_t, 0,
    "Topic to subscribe to in order to "
    "receive the laser scan for localization.",
    default="scan"
)

gen.add(
    "min_particles", int_t, 0,
    "Minimum allowed number of particles.",
    default=100, min=0
)

gen.add(
    "max_particles", int_t, 0,
    "Maximum allowed number of particles.",
    default=5000, min=0
)

gen.add(
    "recovery_alpha_slow", double_t, 0,
    "Exponential decay rate for the slow average weight filter, "
    "used in deciding when to recover by adding random poses.",
    default=0.001, min=0., max=1.
)

gen.add(
    "recovery_alpha_fast", double_t, 0,
    "Exponential decay rate for the fast average weight filter, "
    "used in deciding when to recover by adding random poses.",
    default=0.1, min=0., max=1.)

gen.add(
    "kld_err", double_t, 0,
    "Maximum particle filter population error between the true distribution "
    "and the estimated distribution. It is used in KLD resampling to limit the "
    "allowed number of particles to the minimum necessary.",
    default=0.01, min=0., max=1.)

gen.add(
    "kld_z", double_t, 0,
    "Upper standard normal quantile for P, where P is the probability "
    "that the error in the estimated distribution will be less than pf_err "
    "in KLD resampling.", default=3.0
)

gen.add(
    "spatial_resolution_x", double_t, 0,
    "Resolution in meters for the X axis used to divide "
    "the space in buckets for KLD resampling.",
    default=0.1, min=0.
)

gen.add(
    "spatial_resolution_y", double_t, 0,
    "Resolution in meters for the Y axis used to divide "
    "the space in buckets for KLD resampling.",
    default=0.1, min=0.
)

gen.add(
    "spatial_resolution_theta", double_t, 0,
    "Resolution in radians for the theta axis to divide "
    "the space in buckets for KLD resampling.",
    default=math.pi / 4, min=0., max=2 * math.pi
)

gen.add(
    "resample_interval", int_t, 0,
    "Number of filter updates required before resampling.",
    default=2, min=1
)

gen.add(
    "selective_resampling", bool_t, 0,
    "When set to true, will reduce the resampling rate when not needed and help "
    "avoid particle deprivation. The resampling will only happen if the effective "
    "number of particles (N_eff = 1/(sum(k_i^2))) is lower than half the current "
    "number of particles (READ-ONLY).", default=False
)

gen.add(
    "tf_broadcast", bool_t, 0,
    "Set this to false to prevent amcl from publishing the transform "
    "between the global frame and the odometry frame.", default=True
)

gen.add(
    "transform_tolerance", double_t, 0,
    "Time with which to post-date the transform that is published, "
    "to indicate that this transform is valid into the future",
    default=0.1, min=0.
)

motion_model_enum = gen.enum([
    gen.const("differential_drive", str_t, "differential_drive", ""),
    gen.const("omnidirectional_drive", str_t, "omnidirectional_drive", ""),
    gen.const("stationary", str_t, "stationary", "")
], "Motion models supported")

gen.add(
    "odom_model_type", str_t, 0, "Which motion model to use",
    default="differential_drive", edit_method=motion_model_enum
)

gen.add(
    "odom_alpha1", double_t, 0,
    "Rotation noise from rotation for the differential drive model.",
    default=0.2, min=0.
)

gen.add(
    "odom_alpha2", double_t, 0,
    "Rotation noise from translation for the differential drive model.",
    default=0.2, min=0.
)

gen.add(
    "odom_alpha3", double_t, 0,
    "Translation noise from translation for the differential drive model.",
    default=0.2, min=0.
)

gen.add(
    "odom_alpha4", double_t, 0,
    "Translation noise from rotation for the differential drive model.",
    default=0.2, min=0.
)

gen.add(
    "odom_alpha5", double_t, 0,
    "Strafe noise from translation for the omnidirectional drive model.",
    default=0.2, min=0.
)

gen.add(
    "update_min_a", double_t, 0,
    "Rotational movement required before performing a filter update.",
    default=math.pi / 6, min=0., max=2 * math.pi
)

gen.add(
    "update_min_d", double_t, 0,
    "Translational movement required before performing a filter update.",
    default=0.2, min=0.
)

sensor_model_enum = gen.enum([
    gen.const("beam", str_t, "beam", ""),
    gen.const("likelihood_field", str_t, "likelihood_field", "")
], "Sensor models supported.")

gen.add(
    "laser_model_type", str_t, 0, "Which observation model to use.",
    default="likelihood_field", edit_method=sensor_model_enum
)

gen.add(
    "laser_likelihood_max_dist", double_t, 0,
    "Maximum distance to do obstacle inflation on map, "
    "used in likelihood field model.",
    default=2.0, min=0.
)

gen.add(
    "laser_max_range", double_t, 0,
    "Maximum scan range to be considered.",
    default=100., min=0.
)

gen.add(
    "laser_min_range", double_t, 0,
    "Minimum scan range to be considered.",
    default=0., min=0.
)

gen.add(
    "laser_max_beams", int_t, 0,
    "How many evenly-spaced beams in each scan "
    "will be used when updating the filter.",
    default=30, min=2
)

gen.add(
    "laser_z_hit", double_t, 0,
    "Mixture weight for the probability of hitting an obstacle.",
    default=0.5, min=0., max=1.
)

gen.add(
    "laser_z_rand", double_t, 0,
    "Mixture weight for the probability of getting random measurements.",
    default=0.5, min=0., max=1.
)

gen.add(
    "laser_z_max", double_t, 0,
    "Mixture weight for the probability of getting max range measurements.",
    default=0.5, min=0., max=1.
)

gen.add(
    "laser_z_short", double_t, 0,
    "Mixture weight for the probability of getting short measurements.",
    default=0.5, min=0., max=1.
)

gen.add(
    "laser_lambda_short", double_t, 0,
    "Short readings' exponential distribution parameter.",
    default=0.1, min=0.
)

gen.add(
    "laser_sigma_hit", double_t, 0,
    "Standard deviation of the hit distribution.",
    default=0.2, min=0.
)

gen.add(
    "always_reset_initial_pose", bool_t, 0,
    "If false, AMCL will use the last known pose "
    "to initialize when a new map is received.",
    default=False,
)

gen.add(
    "first_map_only", bool_t, 0,
    "Set this to true when you want to load only "
    "the first published map from map_server "
    "and ignore subsequent ones.",
    default=False
)

gen.add(
    "set_initial_pose", bool_t, 0,
    "Set the initial pose from the initial_pose parameters.",
    default=False
)

gen.add(
    "initial_pose_x", double_t, 0.,
    "Initial pose x axis coordinate.", default=0.
)

gen.add(
    "initial_pose_y", double_t, 0.,
    "Initial pose y axis coordinate.", default=0.
)

gen.add(
    "initial_pose_a", double_t, 0.,
    "Initial pose yaw rotation.", default=0.
)

gen.add(
    "initial_cov_xx", double_t, 0,
    "Initial pose x axis covariance.", default=0.5**2
)

gen.add(
    "initial_cov_yy", double_t, 0,
    "Initial pose y axis covariance.", default=0.5**2
)

gen.add(
    "initial_cov_aa", double_t, 0,
    "Initial pose yaw covariance.", default=(math.pi / 12)**2
)

gen.add(
    "initial_cov_xy", double_t, 0,
    "Initial pose xy covariance.", default=0.
)

gen.add(
    "initial_cov_xa", double_t, 0,
    "Initial pose xyaw covariance.", default=0.
)

gen.add(
    "initial_cov_ya", double_t, 0,
    "Initial pose yyaw covariance.", default=0.
)

gen.add(
    "save_pose_rate", double_t, 0,
    "Rate at which to store the last estimated pose "
    "and covariance to the parameter server.",
    default=0.0
)

execution_policy_enum = gen.enum([
    gen.const("seq", str_t, "seq", ""),
    gen.const("par", str_t, "par", "")
], "Execution policies supported.")

gen.add(
    "execution_policy", str_t, 0,
    "Execution policy used to process particles.",
    default="par", edit_method=execution_policy_enum
)

gen.add(
    "std_warn_level_x", double_t, 0,
    "Warning level for last estimate x standard deviation.",
    default=0.2
)

gen.add(
    "std_warn_level_y", double_t, 0,
    "Warning level for last estimate y standard deviation.",
    default=0.2
)

gen.add(
    "std_warn_level_yaw", double_t, 0,
    "Warning level for last estimate yaw standard deviation.",
    default=0.2
)

gen.add(
    "restore_defaults", bool_t, 0,
    "Restore default configuration.",
    default=False
)

exit(gen.generate("beluga_amcl", "beluga_amcl", "Amcl"))
